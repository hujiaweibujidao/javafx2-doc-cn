<!DOCTYPE html>
<html>
 <head> 
  <meta charset="utf-8" /> 
  <title>Working with Event Handlers &middot; Handling JavaFX Events &middot; JavaFx 2 中文文档</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
  <meta name="keywords" content="JavaFx JavaFx2 JavaFx文档 JavaFx2文档 JavaFx2中文文档 JavaFx中文文档" /> 
  <meta name="description" content="JavaFx 2 中文文档" /> 
  <meta name="author" content="" /> 
  <!-- Le styles --> 
  <link href="../../assets/css/bootstrap.css" rel="stylesheet" /> 
  <link href="../../assets/css/bootstrap-responsive.css" rel="stylesheet" /> 
  <link href="../../assets/css/docs.css" rel="stylesheet" /> 
  <link href="../../assets/js/google-code-prettify/prettify.css" rel="stylesheet" /> 
  <link media="screen,projection" href="../../assets/css/ui.totop.css" rel="stylesheet" /> 
  <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements --> 
  <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
  <!-- Le fav and touch icons --> 
  <link rel="shortcut icon" href="../../assets/ico/favicon.ico" /> 
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="../../assets/ico/apple-touch-icon-144-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="../../assets/ico/apple-touch-icon-114-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="../../assets/ico/apple-touch-icon-72-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" href="../../assets/ico/apple-touch-icon-57-precomposed.png" /> 
  <script src="../../assets/js/ga.js"></script> 
 </head> 
 <body data-spy="scroll" data-target=".subnav" data-offset="50"> 
  <!-- Navbar
    ================================================== --> 
  <div class="navbar navbar-fixed-top"> 
   <div class="navbar-inner"> 
    <div class="container"> 
     <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
     <a class="brand" href="../../index.html">JavaFx 2 中文文档</a> 
     <div class="nav-collapse collapse"> 
      <ul class="nav"> 
       <li class=""><a href="../../index.html"><i class="icon icon-home icon-white"></i> 首页</a></li> 
       <li class="divider-vertical"></li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">入门<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/overview/jfxpub-overview.htm">什么是JavaFx？</a></li> 
         <li><a href="../../2/get_started/jfxpub-get_started.htm">开始使用JavaFx</a></li> 
         <li><a href="../../2/fxml_get_started/jfxpub-fxml_get_started.htm">开始使用FXML</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">用户界面<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/layout/jfxpub-layout.htm">使用布局</a></li> 
         <li><a href="../../2/text/jfxpub-text.htm">添加文本</a></li> 
         <li><a href="../../2/ui_controls/jfxpub-ui_controls.htm">使用用户界面控件</a></li> 
         <li><a href="../../2/events/jfxpub-events.htm">处理事件</a></li> 
         <li><a href="../../2/charts/jfxpub-charts.htm">创建图表</a></li> 
         <li><a href="../../2/webview/jfxpub-webview.htm">添加HTML内容</a></li> 
         <li><a href="../../2/css_tutorial/jfxpub-css_tutorial.htm">使用CSS为应用程序设置皮肤</a></li> 
         <li><a href="../../2/drag_drop/jfxpub-drag_drop.htm">拖放数据</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">效果&middot;动画&middot;媒体<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/visual_effects/jfxpub-visual_effects.htm">创建视觉效果</a></li> 
         <li><a href="../../2/transformations/jfxpub-transformations.htm">添加二维和三维变形</a></li> 
         <li><a href="../../2/animations/jfxpub-animations.htm">添加过渡和动画</a></li> 
         <li><a href="../../2/media/jfxpub-media.htm">嵌入媒体</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">应用程序逻辑<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/architecture/jfxpub-architecture.htm">架构和框架</a></li> 
         <li><a href="../../2/scenegraph/jfxpub-scenegraph.htm">使用场景图</a></li> 
         <li><a href="../../2/binding/jfxpub-binding.htm">使用属性和绑定</a></li> 
         <li><a href="../../2/collections/jfxpub-collections.htm">使用集合</a></li> 
         <li><a href="../../2/threads/jfxpub-threads.htm">并发和线程</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">部署和更多<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/deployment/jfxpub-deployment.htm">打包和部署</a></li> 
         <li><a href="../../2/swing/jfxpub-swing.htm">在Swing中使用JavaFx</a></li> 
         <li><a href="../../2/swt_interoperability/jfxpub-swt_interoperability.htm">与SWT的互操作性</a></li> 
         <li><a href="../../2/doclet/jfxpub-doclet.htm">使用Doclet</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">参考<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="http://docs.oracle.com/javafx/2/api/index.html" target="_blank"><i class="icon-share icon"></i> API文档</a></li> 
         <li><a href="http://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html" target="_blank"><i class="icon-share icon"></i> CSS参考指南</a></li> 
         <li><a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html" target="_blank"><i class="icon-share icon"></i> FXML简介</a></li> 
        </ul> </li> 
       <li class="divider-vertical"></li> 
       <li class=""><a href="../../more.html"><i class="icon icon-plus-sign icon-white"></i> 更多精彩</a></li> 
       <li class=""><a href="../../license.html"><i class="icon icon-book icon-white"></i> 许可说明</a></li> 
       <li class=""><a href="../../about.html"><i class="icon icon-user icon-white"></i> 关于我们</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="row"> 
   <div id="container" class="container span9 offset1"> 
    <!-- Masthead
================================================== --> 
    <header class="jumbotron subhead" id="overview"> 
     <!-- Insert Header Here! --> 
     <h1>Handling JavaFX Events</h1>
     <p class=" lead">Working with Event Handlers</p>
     <ul class=" pager">
      <li class=" previous"><a href="filters.htm">←上一篇</a></li>
     </ul>
     <hr />
    </header>
    <div id="ind"> 
     <!-- /////////////// Start content copied from DARB output ////////////// --> 
     <a id="BABBHHCJ" name="BABBHHCJ"></a>
     <a id="JFXEV149" name="JFXEV149"></a>  
     <a id="JFXEV150" name="JFXEV150"></a> 
     <p>This topic describes event handlers in JavaFX applications. Learn how event handlers can be used to process the events generated by keyboard actions, mouse actions, scroll actions, and other user interactions with your application.</p> 
     <p>Event handlers enable you to handle events during the event bubbling phase. A node can have one or more handlers for handling an event. A single handler can be used for more than one node and more than one event type. If an event handler for a child node does not consume the event, an event handler for a parent node enables the parent node to act on the event after a child node processes it and to provide common event processing for multiple child nodes.</p> 
     <a id="JFXEV151" name="JFXEV151"></a> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref30" name="sthref30"></a> 
      <h2 class="sect1">Registering and Removing an Event Handler</h2> 
      <p>To process an event during the event bubbling phase, a node must register an event handler. An event handler is an implementation of the <a href="../api/javafx/event/EventHandler.html"><code>EventHandler</code></a> interface. The <code>handle()</code> method of this interface provides the code that is executed when the event that is associated with the handler is received by the node that registered the handler.</p> 
      <p>To register a handler, use the <code>addEventHandler()</code> method. This method takes the event type and the handler as arguments. In <a href="#JFHECJBG">Example 4-1</a>, the first handler is added to a single node and processes a specific event type. A second handler for handling input events is defined and registered by two different nodes. The same handler is also registered for two different types of events.</p> 
      <div class="example">
       <a id="JFHECJBG" name="JFHECJBG"></a>
       <a id="JFXEV152" name="JFXEV152"></a> 
       <p class="titleinexample">Example 4-1 Register a Handler</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
// Register an event handler for a single node and a specific event type
node.addEventHandler(DragEvent.DRAG_ENTERED, 
                    new EventHandler&lt;DragEvent&gt;() {
                        public void handle(DragEvent) { ... };
                    });

// Define an event handler
EventHandler handler = new EventHandler(&lt;InputEvent&gt;() {
    public void handle(InputEvent event) {
        System.out.println(&quot;Handling event &quot; + event.getEventType()); 
        event.consume();
    }

// Register the same handler for two different nodes
myNode1.addEventHandler(DragEvent.DRAG_EXITED, handler);
myNode2.addEventHandler(DragEvent.DRAG_EXITED, handler);

// Register the handler for another event type
myNode1.addEventHandler(MouseEvent.MOUSE_DRAGGED, handler);
</pre>
      </div> 
      <!-- class="example" --> 
      <p>Note that an event handler that is defined for one type of event can also be used for any subtypes of that event. See <a href="processing.htm#CEGCHJDH">Event Types</a> for information on the hierarchy of event types.</p> 
      <p>When you no longer want an event handler to process events for a node or for an event type, remove the handler using the <code>removeEventHandler()</code> method. This method takes the event type and the handler as arguments. In <a href="#JFHHDBAC">Example 4-2</a>, the handler defined in <a href="#JFHECJBG">Example 4-1</a> is removed from the <code>DragEvent.DRAG_EXITED</code> event for <code>myNode1</code>. The handler is still executed by <code>myNode2</code> and by <code>myNode1</code> for the <code>MouseEvent.MOUSE_DRAGGED</code> event.</p> 
      <div class="example">
       <a id="JFHHDBAC" name="JFHHDBAC"></a>
       <a id="JFXEV153" name="JFXEV153"></a> 
       <p class="titleinexample">Example 4-2 Remove a Handler</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
// Remove an event handler
myNode1.removeEventHandler(DragEvent.DRAG_EXITED, handler);
</pre>
      </div> 
      <!-- class="example" --> 
      <div align="center"> 
       <div class="inftblnotealso">
        <br /> 
        <table class="NoteAlso oac_no_warn table table-bordered table-striped" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
         <tbody> 
          <tr> 
           <td align="left"> <p class="notep1">Tip:</p> <p>To remove an event handler that was registered by a convenience method, pass null to the convenience method, for example, <code>node1.setOnMouseDragged(null)</code>.</p> </td> 
          </tr> 
         </tbody> 
        </table> 
        <br />
       </div> 
       <!-- class="inftblnotealso" -->
      </div> 
     </div> 
     <!-- class="sect1" --> 
     <a id="JFXEV154" name="JFXEV154"></a> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref31" name="sthref31"></a> 
      <h2 class="sect1">Using Event Handlers</h2> 
      <p>Event handlers are typically used on a the leaf nodes or on a branch node of the event dispatch chain and are called during the event bubbling phase of event handling. Use a handler on a branch node to perform actions such as defining a default response for all child nodes.</p> 
      <p>To see an example of how handlers can be used, download the <code>KeyboardExample.zip</code> file from the sidebar. Extract the NetBeans project and open it in the NetBeans IDE. The following sections describe the handlers that are used by this example.</p> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref32" name="sthref32"></a> 
       <h3 class="sect2">Keyboard Example</h3> 
       <p>The Keyboard example demonstrates the following uses of handlers:</p> 
       <ul> 
        <li> <p>Registering a single handler for two different event types</p> </li> 
        <li> <p>Providing common event processing for child nodes in a parent node</p> </li> 
       </ul> 
       <p><a href="#BABGAIGC">Figure 4-1</a> is the screen that is shown when the Keyboard Example is started. The user interface consists of four letters, each in its own square, which represent the corresponding keyboard key. The first key on the screen is highlighted, which indicates that it has the focus. Use the left and right arrow keys on the keyboard to move the focus to a different key on the screen.</p> 
       <div class="figure">
        <a id="BABGAIGC" name="BABGAIGC"></a> 
        <p class="titleinfigure">Figure 4-1 Initial Screen for Keyboard Example</p> 
        <img src="img/initial_keyboard-screen.png" alt="Description of Figure 4-1 follows" title="Description of Figure 4-1 follows" longdesc="img_text/initial_keyboard-screen.htm" />
        <br /> 
        <br /> 
        <br />
       </div> 
       <!-- class="figure" --> 
       <p>When the Enter key is pressed, the key on the screen with the focus changes to red. When the Enter key is released, the key on the screen returns to its previous color. When the key for a letter that matches one of the keys on the screen is pressed, the matching key on the screen changes to red, and returns to its previous color when the key is released. When a key that does not match any key on the screen is pressed, nothing happens. <a href="#BABBGDIB">Figure 4-2</a> shows the screen when the A key has focus and the D key on the keyboard is pressed.</p> 
       <div class="figure">
        <a id="BABBGDIB" name="BABBGDIB"></a> 
        <p class="titleinfigure">Figure 4-2 Key Pressed Screen</p> 
        <img src="img/key_pressed_screen.png" alt="Description of Figure 4-2 follows" title="Description of Figure 4-2 follows" longdesc="img_text/key_pressed_screen.htm" />
        <br /> 
        <br /> 
        <br />
       </div> 
       <!-- class="figure" -->
      </div> 
      <!-- class="sect2" --> 
      <a id="JFXEV158" name="JFXEV158"></a> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref35" name="sthref35"></a> 
       <h3 class="sect2">Handlers for the Keyboard Example</h3> 
       <p>In the Keyboard example, internally each key shown on the screen is represented by a key node. All key nodes are contained in a single keyboard node. Each key node has a handler that receives key events when the key has focus. The handler responds to the key-pressed and key-released events for the Enter key by changing the color of the key on the screen. The event is then consumed so that the keyboard node, which is the parent node, does not receive the event.</p> 
       <p><a href="#BABCIBBB">Example 4-3</a> shows the <code>installEventHandler()</code> method that defines the handler for the key nodes.</p> 
       <div class="example">
        <a id="BABCIBBB" name="BABCIBBB"></a>
        <a id="JFXEV159" name="JFXEV159"></a> 
        <p class="titleinexample">Example 4-3 Handler for the Key Nodes</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
private void installEventHandler(final Node keyNode) {
    // handler for enter key press / release events, other keys are
    // handled by the parent (keyboard) node handler
    final EventHandler&lt;KeyEvent&gt; keyEventHandler =
        new EventHandler&lt;KeyEvent&gt;() {
            public void handle(final KeyEvent keyEvent) {
                if (keyEvent.getCode() == KeyCode.ENTER) {
                    setPressed(keyEvent.getEventType()
                        == KeyEvent.KEY_PRESSED);
 
                    keyEvent.consume();
                }
            }
        };
 
    keyNode.setOnKeyPressed(keyEventHandler);
    keyNode.setOnKeyReleased(keyEventHandler);
}
</pre>
       </div> 
       <!-- class="example" --> 
       <p>The keyboard node has two handlers that handle key events that are not consumed by a key node handler. The first handler changes the color of the key node that matches the key pressed. The second handler responds to the left and right arrow keys and moves the focus.</p> 
       <p><a href="#BABDIFIF">Example 4-4</a> shows <code>the installEventHandler()</code> method that defines the handlers for the keyboard node.</p> 
       <div class="example">
        <a id="BABDIFIF" name="BABDIFIF"></a>
        <a id="JFXEV160" name="JFXEV160"></a> 
        <p class="titleinexample">Example 4-4 Handlers for the Keyboard Node</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
private void installEventHandler(final Parent keyboardNode) {
    // handler for key pressed / released events not handled by
    // key nodes
    final EventHandler&lt;KeyEvent&gt; keyEventHandler =
        new EventHandler&lt;KeyEvent&gt;() {
            public void handle(final KeyEvent keyEvent) {
                final Key key = lookupKey(keyEvent.getCode());
                if (key != null) {
                    key.setPressed(keyEvent.getEventType()
                                   == KeyEvent.KEY_PRESSED);
 
                    keyEvent.consume();
                }
            }
        };
 
    keyboardNode.setOnKeyPressed(keyEventHandler);
    keyboardNode.setOnKeyReleased(keyEventHandler);
 
    keyboardNode.addEventHandler(KeyEvent.KEY_PRESSED,
                                 new EventHandler&lt;KeyEvent&gt;() {
                                     public void handle(
                                         final KeyEvent keyEvent) {
                                               handleFocusTraversal(
                                                   keyboardNode,
                                                   keyEvent);
                                     }
                                 });
}
</pre>
       </div> 
       <!-- class="example" --> 
       <p>The two handlers for the key-pressed event are considered peer handlers. Therefore, even though each handler consumes the event, the other handler is still invoked.</p> 
      </div> 
      <!-- class="sect2" -->
     </div> 
     <!-- class="sect1" --> 
     <a id="JFXEV161" name="JFXEV161"></a> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref36" name="sthref36"></a> 
      <h2 class="sect1">Additional Resources</h2> 
      <p>For information on event handlers, see the <a href="../api/index.html">JavaFX API documentation</a>.</p> 
     </div> 
     <!-- class="sect1" --> 
     <!-- /////////////// End content copied from DARB output ////////////// --> 
    </div> 
    <!-- Insert Sections Here! --> 
    <!-- Footer
      ================================================== --> 
    <footer class="footer"> 
     <!-- UY BEGIN --> 
     <div id="uyan_frame"></div> 
     <script type="text/javascript" id="UYScript" src="http://v1.uyan.cc/js/iframe.js?UYUserId=1529249" async=""></script> 
     <!-- UY END --> 
    </footer> 
   </div>
   <div class=" span3" style="padding-top: 110px;">
    <div class=" well">
     <ul class=" nav nav-list">
      <li class=" nav-header">本章目录</li>
      <li><a href="jfxpub-events.htm">About This Tutorial</a></li>
      <li><a href="processing.htm">Processing Events</a></li>
      <li><a href="convenience_methods.htm">Working with Convenience Methods</a></li>
      <li><a href="filters.htm">Working with Event Filters</a></li>
      <li class=" active"><a href="handlers.htm">Working with Event Handlers</a></li>
      <li class=" divider"></li>
      <li class=" nav-header">源码下载</li>
      <li><a href="http://download.oracle.com/javafx/2/events/DraggablePanelsExample.zip">DraggablePanelsExample.zip</a></li>
      <li><a href="http://download.oracle.com/javafx/2/events/KeyboardExample.zip">KeyboardExample.zip</a></li>
      <li class=" divider"></li>
      <li class=" nav-header">版本信息</li>
      <li>平台版本：JavaFX 2.1</li>
      <li>翻译编辑：(未翻译)</li>
      <li>最后更新：2012年7月28日</li>
     </ul>
    </div>
   </div>
   <!-- /container --> 
  </div> 
  <!-- JiaThis Button BEGIN --> 
  <script type="text/javascript">var jiathis_config = {data_track_clickback:true};</script> 
  <script type="text/javascript" src="http://v3.jiathis.com/code/jiathis_r.js?type=left&amp;move=0&amp;btn=l2.gif&amp;uid=1529249" charset="utf-8"></script> 
  <!-- JiaThis Button END --> 
  <!-- Le javascript
    ================================================== --> 
  <!-- Placed at the end of the document so the pages load faster --> 
  <script src="../../assets/js/jquery.min.js"></script> 
  <script src="../../assets/js/easing.js" type="text/javascript"></script> 
  <script src="../../assets/js/jquery.ui.totop.min.js" type="text/javascript"></script> 
  <script src="../../assets/js/google-code-prettify/prettify.js"></script> 
  <script type="text/javascript">
		$(document).ready(function() {
			/*
			var defaults = {
	  			containerID: 'toTop', // fading element id
				containerHoverID: 'toTopHover', // fading element hover id
				scrollSpeed: 1200,
				easingType: 'linear' 
	 		};
			*/
			$().UItoTop({ easingType: 'easeOutQuart' });
		});
	</script> 
  <script src="../../assets/js/bootstrap.min.js"></script> 
  <script src="../../assets/js/application.js"></script>   
 </body>
</html>