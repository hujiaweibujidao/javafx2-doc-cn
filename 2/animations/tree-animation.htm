<!DOCTYPE html>
<html>
 <head> 
  <meta charset="utf-8" /> 
  <title>Tree Animation Example &middot; Creating Transitions and Timeline Animation in JavaFX &middot; JavaFx 2 中文文档</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
  <meta name="keywords" content="JavaFx JavaFx2 JavaFx文档 JavaFx2文档 JavaFx2中文文档 JavaFx中文文档" /> 
  <meta name="description" content="JavaFx 2 中文文档" /> 
  <meta name="author" content="" /> 
  <!-- Le styles --> 
  <link href="../../assets/css/bootstrap.css" rel="stylesheet" /> 
  <link href="../../assets/css/bootstrap-responsive.css" rel="stylesheet" /> 
  <link href="../../assets/css/docs.css" rel="stylesheet" /> 
  <link href="../../assets/js/google-code-prettify/prettify.css" rel="stylesheet" /> 
  <link media="screen,projection" href="../../assets/css/ui.totop.css" rel="stylesheet" /> 
  <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements --> 
  <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
  <!-- Le fav and touch icons --> 
  <link rel="shortcut icon" href="../../assets/ico/favicon.ico" /> 
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="../../assets/ico/apple-touch-icon-144-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="../../assets/ico/apple-touch-icon-114-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="../../assets/ico/apple-touch-icon-72-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" href="../../assets/ico/apple-touch-icon-57-precomposed.png" /> 
  <script src="../../assets/js/ga.js"></script> 
 </head> 
 <body data-spy="scroll" data-target=".subnav" data-offset="50"> 
  <!-- Navbar
    ================================================== --> 
  <div class="navbar navbar-fixed-top"> 
   <div class="navbar-inner"> 
    <div class="container"> 
     <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
     <a class="brand" href="../../index.html">JavaFx 2 中文文档</a> 
     <div class="nav-collapse collapse"> 
      <ul class="nav"> 
       <li class=""><a href="../../index.html"><i class="icon icon-home icon-white"></i> 首页</a></li> 
       <li class="divider-vertical"></li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">入门<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/overview/jfxpub-overview.htm">什么是JavaFx？</a></li> 
         <li><a href="../../2/get_started/jfxpub-get_started.htm">开始使用JavaFx</a></li> 
         <li><a href="../../2/fxml_get_started/jfxpub-fxml_get_started.htm">开始使用FXML</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">用户界面<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/layout/jfxpub-layout.htm">使用布局</a></li> 
         <li><a href="../../2/text/jfxpub-text.htm">添加文本</a></li> 
         <li><a href="../../2/ui_controls/jfxpub-ui_controls.htm">使用用户界面控件</a></li> 
         <li><a href="../../2/events/jfxpub-events.htm">处理事件</a></li> 
         <li><a href="../../2/charts/jfxpub-charts.htm">创建图表</a></li> 
         <li><a href="../../2/webview/jfxpub-webview.htm">添加HTML内容</a></li> 
         <li><a href="../../2/css_tutorial/jfxpub-css_tutorial.htm">使用CSS为应用程序设置皮肤</a></li> 
         <li><a href="../../2/drag_drop/jfxpub-drag_drop.htm">拖放数据</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">效果&middot;动画&middot;媒体<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/visual_effects/jfxpub-visual_effects.htm">创建视觉效果</a></li> 
         <li><a href="../../2/transformations/jfxpub-transformations.htm">添加二维和三维变形</a></li> 
         <li><a href="../../2/animations/jfxpub-animations.htm">添加过渡和动画</a></li> 
         <li><a href="../../2/media/jfxpub-media.htm">嵌入媒体</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">应用程序逻辑<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/architecture/jfxpub-architecture.htm">架构和框架</a></li> 
         <li><a href="../../2/scenegraph/jfxpub-scenegraph.htm">使用场景图</a></li> 
         <li><a href="../../2/binding/jfxpub-binding.htm">使用属性和绑定</a></li> 
         <li><a href="../../2/collections/jfxpub-collections.htm">使用集合</a></li> 
         <li><a href="../../2/threads/jfxpub-threads.htm">并发和线程</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">部署和更多<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/deployment/jfxpub-deployment.htm">打包和部署</a></li> 
         <li><a href="../../2/swing/jfxpub-swing.htm">在Swing中使用JavaFx</a></li> 
         <li><a href="../../2/swt_interoperability/jfxpub-swt_interoperability.htm">与SWT的互操作性</a></li> 
         <li><a href="../../2/doclet/jfxpub-doclet.htm">使用Doclet</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">参考<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="http://docs.oracle.com/javafx/2/api/index.html" target="_blank"><i class="icon-share icon"></i> API文档</a></li> 
         <li><a href="http://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html" target="_blank"><i class="icon-share icon"></i> CSS参考指南</a></li> 
         <li><a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html" target="_blank"><i class="icon-share icon"></i> FXML简介</a></li> 
        </ul> </li> 
       <li class="divider-vertical"></li> 
       <li class=""><a href="../../more.html"><i class="icon icon-plus-sign icon-white"></i> 更多精彩</a></li> 
       <li class=""><a href="../../license.html"><i class="icon icon-book icon-white"></i> 许可说明</a></li> 
       <li class=""><a href="../../about.html"><i class="icon icon-user icon-white"></i> 关于我们</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="row"> 
   <div id="container" class="container span9 offset1"> 
    <!-- Masthead
================================================== --> 
    <header class="jumbotron subhead" id="overview"> 
     <!-- Insert Header Here! --> 
     <h1>Creating Transitions and Timeline Animation in JavaFX</h1>
     <p class=" lead">Tree Animation Example</p>
     <ul class=" pager">
      <li class=" previous"><a href="basics.htm">←上一篇</a></li>
     </ul>
     <hr />
    </header>
    <div id="ind"> 
     <!-- /////////////// Start content copied from DARB output ////////////// --> 
     <a id="CACCAJAH" name="CACCAJAH"></a>
     <a id="CACCEGFG" name="CACCEGFG"></a>  
     <p>This chapter provides details about the Tree Animation example. You will learn how all the elements on the scene were created and animated. <a href="#CACCJDGG">Figure 2-1</a> shows the scene with a tree.</p> 
     <div class="figure">
      <a id="CACCJDGG" name="CACCJDGG"></a> 
      <p class="titleinfigure">Figure 2-1 Tree Animation</p> 
      <img src="img/tree1.jpg" alt="Description of Figure 2-1 follows" title="Description of Figure 2-1 follows" longdesc="img_text/tree1.htm" />
      <br /> 
      <br /> 
      <br />
     </div> 
     <!-- class="figure" --> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref16" name="sthref16"></a> 
      <h2 class="sect1">Project and Elements</h2> 
      <p>The Tree Animation project consists of several files. Each element, like leaves, grass blades, and others are created in separate classes. TreeGenerator class creates a tree from all the elements. Animator class contains all animation except grass animation that resides in the GrassWindAnimation class.</p> 
      <p>The scene in the example contains the following elements:</p> 
      <ul> 
       <li> <p>Tree with branches, leaves, and flowers</p> </li> 
       <li> <p>Grass</p> </li> 
      </ul> 
      <p>Each element is animated in its own fashion. Some animations run in parallel, and others run sequentially. The tree-growing animation is run only once, whereas the season-change animation is set to run infinitely.</p> 
      <div class="figure">
       <a id="sthref17" name="sthref17"></a> 
       <p class="titleinfigure">Figure 2-2 Animation Timeline</p> 
       <img src="img/timeline-animation.gif" alt="Description of Figure 2-2 follows" title="Description of Figure 2-2 follows" longdesc="img_text/timeline-animation.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>The season-change animation includes the following parts:</p> 
      <ul> 
       <li> <p>Leaves and flowers appear on the tree</p> </li> 
       <li> <p>Flower petals fall and disappear</p> </li> 
       <li> <p>Leaves and grass change color</p> </li> 
       <li> <p>Leaves fall to the ground and disappear</p> </li> 
      </ul> 
     </div> 
     <!-- class="sect1" --> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref19" name="sthref19"></a> 
      <h2 class="sect1">Grass</h2> 
      <p>This section describes how the grass is created and animated.</p> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref20" name="sthref20"></a> 
       <h3 class="sect2">Creating Grass</h3> 
       <p>In the Tree Animation example, the grass, shown in <a href="#CACGIGGD">Figure 2-3</a> consists of separate grass blades, each of which is created using <code>Path</code> and added to the list. Each blade is then curved and colored. An algorithm is used to randomize the height, curve, and color of the blades, and to distribute the blades on the &quot;ground.&quot; You can specify the number of blades and the size of the &quot;ground&quot; covered with grass.</p> 
       <div class="figure">
        <a id="CACGIGGD" name="CACGIGGD"></a> 
        <p class="titleinfigure">Figure 2-3 Grass</p> 
        <img src="img/grass.jpg" alt="Description of Figure 2-3 follows" title="Description of Figure 2-3 follows" longdesc="img_text/grass.htm" />
        <br /> 
        <br /> 
        <br />
       </div> 
       <!-- class="figure" --> 
       <div class="example">
        <a id="sthref22" name="sthref22"></a> 
        <p class="titleinexample">Example 2-1 Creating a Grass Blade</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
public class Blade extends Path {
 
    public final Color SPRING_COLOR = Color.color(random() * 0.5, random() * 0.5<br /> + 0.5, 0.).darker();
    public final Color AUTUMN_COLOR = Color.color(random() * 0.4 + 0.3, random()<br /> * 0.1 + 0.4, random() * 0.2);
    private final static double width = 3;
    private double x = RandomUtil.getRandom(170);
    private double y = RandomUtil.getRandom(20) + 20;
    private double h = (50 * 1.5 - y / 2) * RandomUtil.getRandom(0.3);
    public SimpleDoubleProperty phase = new SimpleDoubleProperty();
 
    public Blade() {
 
        getElements().add(new MoveTo(0, 0));
        final QuadCurveTo curve1;
        final QuadCurveTo curve2;
        getElements().add(curve1 = new QuadCurveTo(-10, h, h / 4, h));
        getElements().add(curve2 = new QuadCurveTo(-10, h, width, 0));
 
        setFill(AUTUMN_COLOR); //autumn color of blade
        setStroke(null);
 
        getTransforms().addAll(Transform.translate(x, y));
 
        curve1.yProperty().bind(new DoubleBinding() {
 
            {
                super.bind(curve1.xProperty());
            }
 
            @Override
            protected double computeValue() {
 
                final double xx0 = curve1.xProperty().get();
                return Math.sqrt(h * h - xx0 * xx0);
            }
        }); //path of top of blade is circle
 
        //code to bend blade
        curve1.controlYProperty().bind(curve1.yProperty().add(-h / 4));
        curve2.controlYProperty().bind(curve1.yProperty().add(-h / 4));
 
        curve1.xProperty().bind(new DoubleBinding() {
 
            final double rand = RandomUtil.getRandom(PI / 4);
 
            {
                super.bind(phase);
            }
 
            @Override
            protected double computeValue() {
                return (h / 4) + ((cos(phase.get() + (x + 400.) * PI / 1600 +<br /> rand) + 1) / 2.) * (-3. / 4) * h;
            }
        });
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect2" --> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref23" name="sthref23"></a> 
       <h3 class="sect2">Creating Timeline Animation for Grass Movement</h3> 
       <p>Timeline animation that changes the x-coordinate of the top of the blade is used to create grass movement.</p> 
       <p>Several algorithms are used to make the movement look natural. For example, the top of each blade is moved in a circle instead of a straight line, and side curve of the blade make the blade look as if it bends under the wind. Random numbers are added to separate each blade movement.</p> 
       <div class="example">
        <a id="sthref24" name="sthref24"></a> 
        <p class="titleinexample">Example 2-2 Grass Animation</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
class GrassWindAnimation extends Transition {
 
    final private Duration animationTime = Duration.seconds(3);
    final private DoubleProperty phase = new SimpleDoubleProperty(0);
    final private Timeline tl = new Timeline(Animation.INDEFINITE);
 
    public GrassWindAnimation(List&lt;Blade&gt; blades) {
 
        setCycleCount(Animation.INDEFINITE);
        setInterpolator(Interpolator.LINEAR);
        setCycleDuration(animationTime);
        for (Blade blade : blades) {
            blade.phase.bind(phase);
        }
    }
 
    @Override
    protected void interpolate(double frac) {
        phase.set(frac * 2 * PI);
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect2" -->
     </div> 
     <!-- class="sect1" --> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref25" name="sthref25"></a> 
      <h2 class="sect1">Tree</h2> 
      <p>This section explains how the tree shown in <a href="#CACBCAAE">Figure 2-4</a> is created and animated.</p> 
      <div class="figure">
       <a id="CACBCAAE" name="CACBCAAE"></a> 
       <p class="titleinfigure">Figure 2-4 Tree</p> 
       <img src="img/tree-only.jpg" alt="Description of Figure 2-4 follows" title="Description of Figure 2-4 follows" longdesc="img_text/tree-only.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref27" name="sthref27"></a> 
       <h3 class="sect2">Branches</h3> 
       <p>The tree consists of branches, leaves, and flowers. Leaves and flowers are drawn on the top branches of the tree. Each branch generation consists of three branches (one top and two side branches) drawn from a parent branch. You can specify the number of generations in the code using the <code>NUMBER_OF_BRANCH_GENERATIONS</code> passed in the constructor of TreeGenerator in the Main class. <a href="#CACIJGAB">Example 2-3</a> shows the code in the TreeGenerator class that creates the trunk of the tree (or the root branch) and adds three branches for the following generations.</p> 
       <div class="example">
        <a id="CACIJGAB" name="CACIJGAB"></a> 
        <p class="titleinexample">Example 2-3 Root Branch</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private List&lt;Branch&gt; generateBranches(Branch parentBranch, int depth) {
        List&lt;Branch&gt; branches = new ArrayList&lt;&gt;();
        if (parentBranch == null) { // add root branch
            branches.add(new Branch());
        } else {
            if (parentBranch.length &lt; 10) {
                return Collections.emptyList();
            }
            branches.add(new Branch(parentBranch, Type.LEFT, depth));
            branches.add(new Branch(parentBranch, Type.RIGHT, depth));
            branches.add(new Branch(parentBranch, Type.TOP, depth));
        }
 
        return branches;
    }
</pre>
       </div> 
       <!-- class="example" --> 
       <p>To make the tree look more natural, each child generation branch is grown at an angle to the parent branch, and each child branch is smaller than its parent. The child angle is calculated using random values. <a href="#CACBEIJA">Example 2-4</a> provides a code for creating child branches.</p> 
       <div class="example">
        <a id="CACBEIJA" name="CACBEIJA"></a> 
        <p class="titleinexample">Example 2-4 Child Branches</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    public Branch(Branch parentBranch, Type type, int depth) {
        this();
        SimpleDoubleProperty locAngle = new SimpleDoubleProperty(0);
        globalAngle.bind(locAngle.add(parentBranch.globalAngle.get()));
        double transY = 0;
        switch (type) {
            case TOP:
                transY = parentBranch.length;
                length = parentBranch.length * 0.8;
                locAngle.set(getRandom(10));
                break;
            case LEFT:
            case RIGHT:
                transY = parentBranch.length - getGaussianRandom(0,<br /> parentBranch.length, parentBranch.length / 10, parentBranch.length / 10);
                locAngle.set(getGaussianRandom(35, 10) * (Type.LEFT == type ? 1 :<br /> -1));
                if ((0 &gt; globalAngle.get() || globalAngle.get() &gt; 180) &amp;&amp; depth &lt;<br /> 4) {
                    length = parentBranch.length * getGaussianRandom(0.3, 0.1);
                } else {
                    length = parentBranch.length * 0.6;
                }
                break;
        }
        setTranslateY(transY);
        getTransforms().add(new Rotate(locAngle.get(), 0, 0));
        globalH = getTranslateY() * cos(PI / 2 - parentBranch.globalAngle.get() *<br /> PI / 180) + parentBranch.globalH;
        setBranchStyle(depth);
        addChildToParent(parentBranch, this);
    }
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect2" --> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref28" name="sthref28"></a> 
       <h3 class="sect2">Leaves and Flowers</h3> 
       <p>Leaves are created on top branches. Because the leaves are created at the same time as the branches of the tree, leaves are scaled to 0 by <code>leaf.setScaleX(0)</code> and <code>leaf.setScaleY(0)</code> to hide them before the tree is grown as shown in the <a href="#CACDBHCA">Example 2-5</a>. The same trick is used to hide the leaves when they fall. To create a more natural look, leaves have slightly different shades of green. Also, the leaf color changes depending on the location of the leaf; the darker shades are applied to the leaves located below the middle of the tree crown.</p> 
       <div class="example">
        <a id="CACDBHCA" name="CACDBHCA"></a> 
        <p class="titleinexample">Example 2-5 Leaf Shape and Placement</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
public class Leaf extends Ellipse {
 
    public final Color AUTUMN_COLOR;
    private final int N = 5;
    private List&lt;Ellipse&gt; petals = new ArrayList&lt;&gt;(2 * N + 1);
 
    public Leaf(Branch parentBranch) {
        super(0, parentBranch.length / 2., 2, parentBranch.length / 2.);
        setScaleX(0);
        setScaleY(0);
 
        double rand = random() * 0.5 + 0.3;
        AUTUMN_COLOR = Color.color(random() * 0.1 + 0.8, rand, rand / 2);
 
        Color color = new Color(random() * 0.5, random() * 0.5 + 0.5, 0, 1);
        if (parentBranch.globalH &lt; 400 &amp;&amp; random() &lt; 0.8) { //bottom leaf is darker
            color = color.darker();
        }
        setFill(color);
    }
}
</pre>
       </div> 
       <!-- class="example" --> 
       <p>Flowers are created in the Flower class and then added to the top branches of the tree in the TreeGenerator class. You can specify the number of petals in a flower. Petals are ellipses distributed in a circle with some overlapping. Similar to grass and leaves, the flower petals are colored in different shades of pink.</p> 
      </div> 
      <!-- class="sect2" --> 
      <div class="sect2">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref29" name="sthref29"></a> 
       <h3 class="sect2">Animating Tree Elements</h3> 
       <p>This section explains techniques employed in the Tree Animation example to animate the tree and season change. Parallel transition is used to start all the animations in the scene as shown in <a href="#CACCCDGA">Example 2-6</a>.</p> 
       <div class="example">
        <a id="CACCCDGA" name="CACCCDGA"></a> 
        <p class="titleinexample">Example 2-6 Main Animation</p> 
        <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
final Transition all = new ParallelTransition(new GrassWindAnimation(grass),
treeWindAnimation, new SequentialTransition(branchGrowingAnimation,
seasonsAnimation(tree, grass)));
        all.play();
</pre>
       </div> 
       <!-- class="example" --> 
       <div class="sect3">
        <!-- infolevel="all" infotype="General" -->
        <a id="sthref30" name="sthref30"></a> 
        <h4 class="sect3">Growing a Tree</h4> 
        <p>Tree growing animation is run only once, at the beginning of the Tree Animation example. The application starts a sequential transition animation to grow branches one generation after another as shown in <a href="#CACFGCCB">Example 2-7</a>. Initially length is set to 0. The root branch size and angle are specified in the <code>TreeGenerator</code> class. Currently each generation is grown during two seconds.</p> 
        <div class="example">
         <a id="CACFGCCB" name="CACFGCCB"></a> 
         <p class="titleinexample">Example 2-7 Sequential Transition to Start Branch Growing Animation</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
SequentialTransition branchGrowingAnimation = new SequentialTransition();
</pre>
        </div> 
        <!-- class="example" --> 
        <p>The code in <a href="#CACCCICJ">Example 2-8</a> creates the Tree growing animation:</p> 
        <div class="example">
         <a id="CACCCICJ" name="CACCCICJ"></a> 
         <p class="titleinexample">Example 2-8 Branch Growing Animation</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private Animation animateBranchGrowing(List&lt;Branch&gt; branchGeneration, int
 depth, Duration duration) {
 
       ParallelTransition sameDepthBranchAnimation = new ParallelTransition();
       for (final Branch branch : branchGeneration) {
         Timeline branchGrowingAnimation = new Timeline(new KeyFrame(duration,
 new KeyValue(branch.base.endYProperty(), branch.length)));
            sameDepthBranchAnimation.getChildren().add(
                    new SequentialTransition(
PauseTransitionBuilder.create().duration(Duration.ONE).onFinished(new
 EventHandler&lt;ActionEvent&gt;() {
 
                @Override
                public void handle(ActionEvent t) {
                    branch.base.setStrokeWidth(branch.length / 25);
                }
            }).build(),
                    branchGrowingAnimation));
 
        }
        return sameDepthBranchAnimation;
 
    }
</pre>
        </div> 
        <!-- class="example" --> 
        <p>Because all the branch lines are calculated and created simultaneously, they could appear on the scene as dots. The code introduces a few tricks to hide the lines before they grow. In Example the code <code>duration.one millisecond</code> pauses transition for an unnoticeable time. In the <a href="#CACGGHJH">Example 2-9</a>, the <code>base.setStrokeWidth(0)</code> code sets branches width to 0 before the grow animation starts for each generation.</p> 
        <div class="example">
         <a id="CACGGHJH" name="CACGGHJH"></a> 
         <p class="titleinexample">Example 2-9 Tree Growing Animation Optimization</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private void setBranchStyle(int depth) {
        base.setStroke(Color.color(0.4, 0.1, 0.1, 1));
 
        if (depth &lt; 5) { 
            base.setStrokeLineJoin(StrokeLineJoin.ROUND);
            base.setStrokeLineCap(StrokeLineCap.ROUND);
        }
        base.setStrokeWidth(0); 
    }
}
</pre>
        </div> 
        <!-- class="example" -->
       </div> 
       <!-- class="sect3" --> 
       <div class="sect3">
        <!-- infolevel="all" infotype="General" -->
        <a id="sthref31" name="sthref31"></a> 
        <h4 class="sect3">Creating Tree Crown Movement</h4> 
        <p>In parallel with growing a tree, wind animation starts. Tree branches, leaves, and flowers are moving together.</p> 
        <p>Tree wind animation is similar to grass movement animation, but it is simpler because only the angle of the branches changes. To make the tree movement look natural, the bend angle is different for different branch generations. The higher the generation of the branch (that is the smaller the branch), the more it bends. <a href="#CACGJGIB">Example 2-10</a> provides code for wind animation.</p> 
        <div class="example">
         <a id="CACGJGIB" name="CACGJGIB"></a> 
         <p class="titleinexample">Example 2-10 Wind Animation</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private Animation animateTreeWind(List&lt;Branch&gt; branchGeneration, int depth,
 Duration duration) {
     ParallelTransition wind = new ParallelTransition();
     for (final Branch brunch : branchGeneration) {
        final Rotate rotation = new Rotate(0);
        brunch.getTransforms().add(rotation);
wind.getChildren().add(TimelineBuilder.create().keyFrames(new KeyFrame(duration,
new KeyValue(rotation.angleProperty(), depth *
 2))).autoReverse(true).cycleCount(Animation.INDEFINITE).build());
        }
        return wind;
    }
</pre>
        </div> 
        <!-- class="example" -->
       </div> 
       <!-- class="sect3" --> 
       <div class="sect3">
        <!-- infolevel="all" infotype="General" -->
        <a id="sthref32" name="sthref32"></a> 
        <h4 class="sect3">Animating Season Change</h4> 
        <p>Season-change animation actually starts after the tree has grown, and run&ucirc; infinitely. The code in <a href="#CACEIFED">Example 2-11</a> calls all the season animations:</p> 
        <div class="example">
         <a id="CACEIFED" name="CACEIFED"></a> 
         <p class="titleinexample">Example 2-11 Starting Season Animation</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
private Transition seasonsAnimation(final Tree tree, final List&lt;Blade&gt; grass) {
 
        Transition spring = animateSpring(tree.leafage, grass);
        Transition flowers = animateFlowers(tree.flowers);
        Transition autumn = animateAutumn(tree.leafage, grass);
        return SequentialTransitionBuilder.create().children(spring, flowers,
 autumn).cycleCount(Animation.INDEFINITE).build();
    }
 
    private Transition animateSpring(List&lt;Leaf&gt; leafage, List&lt;Blade&gt; grass) {
        ParallelTransition springAnimation = new ParallelTransition();
        for (final Blade blade : grass) {
springAnimation.getChildren().add(FillTransitionBuilder.create().shape(blade).
toValue(blade.SPRING_COLOR).duration(GRASS_BECOME_GREEN_DURATION).build());
        }
        for (Leaf leaf : leafage) {
springAnimation.getChildren().add(ScaleTransitionBuilder.create().toX(1).
toY(1).node(leaf).duration(LEAF_APPEARING_DURATION).build());
        }
        return springAnimation;
    }
</pre>
        </div> 
        <!-- class="example" --> 
        <p>Once all the tree branches are grown, leaves start to appear as directed in <a href="#CACIJJDE">Example 2-12</a>.</p> 
        <div class="example">
         <a id="CACIJJDE" name="CACIJJDE"></a> 
         <p class="titleinexample">Example 2-12 Parallel Transition to Start Spring Animation and Show Leaves</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private Transition animateSpring(List&lt;Leaf&gt; leafage, List&lt;Blade&gt; grass) {
        ParallelTransition springAnimation = new ParallelTransition();
        for (final Blade blade : grass) {
springAnimation.getChildren().add(FillTransitionBuilder.create().shape(blade).
toValue(blade.SPRING_COLOR).duration(GRASS_BECOME_GREEN_DURATION).build());
        }
        for (Leaf leaf : leafage) {
springAnimation.getChildren().add(ScaleTransitionBuilder.create().toX(1).toY(1).
node(leaf).duration(LEAF_APPEARING_DURATION).build());
        }
        return springAnimation;
    }
</pre>
        </div> 
        <!-- class="example" --> 
        <p>When all leaves are visible, flowers start to appear as shown in <a href="#CACGFADD">Example 2-13</a>. The sequential transition is used to show flowers gradually. The delay in flower appearance is set in the sequential transition code of <a href="#CACGFADD">Example 2-13</a>. Flowers appear only in the tree crown.</p> 
        <div class="example">
         <a id="CACGFADD" name="CACGFADD"></a> 
         <p class="titleinexample">Example 2-13 Showing Flowers</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private Transition animateFlowers(List&lt;Flower&gt; flowers) {
 
        ParallelTransition flowersAppearAndFallDown = new ParallelTransition();
 
        for (int i = 0; i &lt; flowers.size(); i++) {
            final Flower flower = flowers.get(i);
            for (Ellipse pental : flower.getPetals()) {
          flowersAppearAndFallDown.getChildren().add(new SequentialTransition(
                        FadeTransitionBuilder.create().delay(FLOWER_APPEARING_
DURATION.divide(3).multiply(i + 1)).duration(FLOWER_APPEARING_
DURATION).node(pental).toValue(1).build(),
                        fakeFallDownAnimation(pental)));
            }
        }
        return flowersAppearAndFallDown;
    }
</pre>
        </div> 
        <!-- class="example" --> 
        <p>Once all the flowers appear on the screen, their petals start to fall. In the code in <a href="#CACECADJ">Example 2-14</a> the flowers are duplicated and the first set of them is hidden to show it later.</p> 
        <div class="example">
         <a id="CACECADJ" name="CACECADJ"></a> 
         <p class="titleinexample">Example 2-14 Duplicating Petals</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private Ellipse copyEllipse(Ellipse petalOld, Color color) {
        Ellipse ellipse = new Ellipse();
        ellipse.setRadiusX(petalOld.getRadiusX());
        ellipse.setRadiusY(petalOld.getRadiusY());
        if (color == null) {
            ellipse.setFill(petalOld.getFill());
        } else {
            ellipse.setFill(color);
        }
        ellipse.setRotate(petalOld.getRotate());
        ellipse.setOpacity(0);
        return ellipse;
    }
</pre>
        </div> 
        <!-- class="example" --> 
        <p>Copied flower petals start to fall to the ground one by one as shown in <a href="#CACJEAID">Example 2-15</a>. The petals disappear after five seconds on the ground. The fall trajectory of a petal is not a straight line, but rather a calculated sine curve, so that petals seem to be whirling as they fall.</p> 
        <div class="example">
         <a id="CACJEAID" name="CACJEAID"></a> 
         <p class="titleinexample">Example 2-15 Shedding Flowers</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
           Animation fakeLeafageDown = fakeFallDownEllipseAnimation((Ellipse)
 leaf, leaf.AUTUMN_COLOR, new HideMethod() {
 
                @Override
                public void hide(Node node) {
                    node.setScaleX(0);
                    node.setScaleY(0);
                }
            });
</pre>
        </div> 
        <!-- class="example" --> 
        <p>The next season change starts when all the flowers disappear from the scene. The leaves and grass become yellow, and the leaves fall and disappear. The same algorithm used in <a href="#CACJEAID">Example 2-15</a> to make the flower petals fall is used to show falling leaves. The code in <a href="#CACIAAGB">Example 2-16</a> enables autumn animation.</p> 
        <div class="example">
         <a id="CACIAAGB" name="CACIAAGB"></a> 
         <p class="titleinexample">Example 2-16 Animating Autumn Changes</p> 
         <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
    private Transition animateAutumn(List&lt;Leaf&gt; leafage, List&lt;Blade&gt; grass) {
        ParallelTransition autumn = new ParallelTransition();
 
        ParallelTransition yellowLeafage = new ParallelTransition();
        ParallelTransition dissappearLeafage = new ParallelTransition();
 
        for (final Leaf leaf : leafage) {
 
            final FillTransition toYellow =
 FillTransitionBuilder.create().shape(leaf).toValue(leaf.AUTUMN
_COLOR).duration(LEAF_BECOME_YELLOW_DURATION).build();
            yellowLeafage.getChildren().add(toYellow);
 
            Animation fakeLeafageDown = fakeFallDownEllipseAnimation((Ellipse)
 leaf, leaf.AUTUMN_COLOR, new HideMethod() {
 
                @Override
                public void hide(Node node) {
                    node.setScaleX(0);
                    node.setScaleY(0);
                }
            });
            dissappearLeafage.getChildren().add(new SequentialTransition(
                    fakeLeafageDown,
                    FillTransitionBuilder.create().shape(leaf).toValue((Color)
 leaf.getFill()).duration(Duration.ONE).build()));
        }
 
    ParallelTransition grassBecomeYellowAnimation = new ParallelTransition();
        for (final Blade blade : grass) {
            final FillTransition toYellow =
 FillTransitionBuilder.create().shape(blade).toValue(blade.AUTUMN_
COLOR).delay(Duration.seconds(1 * random())).duration(GRASS_BECOME_YELLOW_
DURATION).build();
            grassBecomeYellowAnimation.getChildren().add(toYellow);
        }
 
        autumn.getChildren().addAll(grassBecomeYellowAnimation, new
 SequentialTransition(yellowLeafage, dissappearLeafage));
        return autumn;
    }
</pre>
        </div> 
        <!-- class="example" --> 
        <p>After all leaves disappear from the ground, spring animation starts by coloring grass in green and showing leaves.</p> 
       </div> 
       <!-- class="sect3" -->
      </div> 
      <!-- class="sect2" -->
     </div> 
     <!-- class="sect1" --> 
     <!-- /////////////// End content copied from DARB output ////////////// --> 
    </div> 
    <!-- Insert Sections Here! --> 
    <!-- Footer
      ================================================== --> 
    <footer class="footer"> 
     <!-- UY BEGIN --> 
     <div id="uyan_frame"></div> 
     <script type="text/javascript" id="UYScript" src="http://v1.uyan.cc/js/iframe.js?UYUserId=1529249" async=""></script> 
     <!-- UY END --> 
    </footer> 
   </div>
   <div class=" span3" style="padding-top: 110px;">
    <div class=" well">
     <ul class=" nav nav-list">
      <li class=" nav-header">本章目录</li>
      <li><a href="jfxpub-animations.htm">About This Document</a></li>
      <li><a href="basics.htm">Animation Basics</a></li>
      <li class=" active"><a href="tree-animation.htm">Tree Animation Example</a></li>
      <li class=" divider"></li>
      <li class=" nav-header">源码下载</li>
      <li><a href="http://download.oracle.com/javafx/2/animations/animations.zip">animations.zip</a></li>
      <li><a href="http://download.oracle.com/javafx/2/animations/tree_animation.zip">tree_animation.zip</a></li>
      <li class=" divider"></li>
      <li class=" nav-header">版本信息</li>
      <li>平台版本：JavaFX 2.1</li>
      <li>翻译编辑：(未翻译)</li>
      <li>最后更新：2012年7月28日</li>
     </ul>
    </div>
   </div>
   <!-- /container --> 
  </div> 
  <!-- JiaThis Button BEGIN --> 
  <script type="text/javascript">var jiathis_config = {data_track_clickback:true};</script> 
  <script type="text/javascript" src="http://v3.jiathis.com/code/jiathis_r.js?type=left&amp;move=0&amp;btn=l2.gif&amp;uid=1529249" charset="utf-8"></script> 
  <!-- JiaThis Button END --> 
  <!-- Le javascript
    ================================================== --> 
  <!-- Placed at the end of the document so the pages load faster --> 
  <script src="../../assets/js/jquery.min.js"></script> 
  <script src="../../assets/js/easing.js" type="text/javascript"></script> 
  <script src="../../assets/js/jquery.ui.totop.min.js" type="text/javascript"></script> 
  <script src="../../assets/js/google-code-prettify/prettify.js"></script> 
  <script type="text/javascript">
		$(document).ready(function() {
			/*
			var defaults = {
	  			containerID: 'toTop', // fading element id
				containerHoverID: 'toTopHover', // fading element hover id
				scrollSpeed: 1200,
				easingType: 'linear' 
	 		};
			*/
			$().UItoTop({ easingType: 'easeOutQuart' });
		});
	</script> 
  <script src="../../assets/js/bootstrap.min.js"></script> 
  <script src="../../assets/js/application.js"></script>   
 </body>
</html>