<!DOCTYPE html>
<html>
 <head> 
  <meta charset="utf-8" /> 
  <title>Customization of UI Controls &middot; Using JavaFX UI Controls &middot; JavaFx 2 中文文档</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
  <meta name="keywords" content="JavaFx JavaFx2 JavaFx文档 JavaFx2文档 JavaFx2中文文档 JavaFx中文文档" /> 
  <meta name="description" content="JavaFx 2 中文文档" /> 
  <meta name="author" content="" /> 
  <!-- Le styles --> 
  <link href="../../assets/css/bootstrap.css" rel="stylesheet" /> 
  <link href="../../assets/css/bootstrap-responsive.css" rel="stylesheet" /> 
  <link href="../../assets/css/docs.css" rel="stylesheet" /> 
  <link href="../../assets/js/google-code-prettify/prettify.css" rel="stylesheet" /> 
  <link media="screen,projection" href="../../assets/css/ui.totop.css" rel="stylesheet" /> 
  <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements --> 
  <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
  <!-- Le fav and touch icons --> 
  <link rel="shortcut icon" href="../../assets/ico/favicon.ico" /> 
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="../../assets/ico/apple-touch-icon-144-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="../../assets/ico/apple-touch-icon-114-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="../../assets/ico/apple-touch-icon-72-precomposed.png" /> 
  <link rel="apple-touch-icon-precomposed" href="../../assets/ico/apple-touch-icon-57-precomposed.png" /> 
  <script src="../../assets/js/ga.js"></script> 
 </head> 
 <body data-spy="scroll" data-target=".subnav" data-offset="50"> 
  <!-- Navbar
    ================================================== --> 
  <div class="navbar navbar-fixed-top"> 
   <div class="navbar-inner"> 
    <div class="container"> 
     <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
     <a class="brand" href="../../index.html">JavaFx 2 中文文档</a> 
     <div class="nav-collapse collapse"> 
      <ul class="nav"> 
       <li class=""><a href="../../index.html"><i class="icon icon-home icon-white"></i> 首页</a></li> 
       <li class="divider-vertical"></li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">入门<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/overview/jfxpub-overview.htm">什么是JavaFx？</a></li> 
         <li><a href="../../2/get_started/jfxpub-get_started.htm">开始使用JavaFx</a></li> 
         <li><a href="../../2/fxml_get_started/jfxpub-fxml_get_started.htm">开始使用FXML</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">用户界面<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/layout/jfxpub-layout.htm">使用布局</a></li> 
         <li><a href="../../2/text/jfxpub-text.htm">添加文本</a></li> 
         <li><a href="../../2/ui_controls/jfxpub-ui_controls.htm">使用用户界面控件</a></li> 
         <li><a href="../../2/events/jfxpub-events.htm">处理事件</a></li> 
         <li><a href="../../2/charts/jfxpub-charts.htm">创建图表</a></li> 
         <li><a href="../../2/webview/jfxpub-webview.htm">添加HTML内容</a></li> 
         <li><a href="../../2/css_tutorial/jfxpub-css_tutorial.htm">使用CSS为应用程序设置皮肤</a></li> 
         <li><a href="../../2/drag_drop/jfxpub-drag_drop.htm">拖放数据</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">效果&middot;动画&middot;媒体<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/visual_effects/jfxpub-visual_effects.htm">创建视觉效果</a></li> 
         <li><a href="../../2/transformations/jfxpub-transformations.htm">添加二维和三维变形</a></li> 
         <li><a href="../../2/animations/jfxpub-animations.htm">添加过渡和动画</a></li> 
         <li><a href="../../2/media/jfxpub-media.htm">嵌入媒体</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">应用程序逻辑<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/architecture/jfxpub-architecture.htm">架构和框架</a></li> 
         <li><a href="../../2/scenegraph/jfxpub-scenegraph.htm">使用场景图</a></li> 
         <li><a href="../../2/binding/jfxpub-binding.htm">使用属性和绑定</a></li> 
         <li><a href="../../2/collections/jfxpub-collections.htm">使用集合</a></li> 
         <li><a href="../../2/threads/jfxpub-threads.htm">并发和线程</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">部署和更多<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="../../2/deployment/jfxpub-deployment.htm">打包和部署</a></li> 
         <li><a href="../../2/swing/jfxpub-swing.htm">在Swing中使用JavaFx</a></li> 
         <li><a href="../../2/swt_interoperability/jfxpub-swt_interoperability.htm">与SWT的互操作性</a></li> 
         <li><a href="../../2/doclet/jfxpub-doclet.htm">使用Doclet</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">参考<b class="caret"></b></a> 
        <ul class="dropdown-menu"> 
         <li><a href="http://docs.oracle.com/javafx/2/api/index.html" target="_blank"><i class="icon-share icon"></i> API文档</a></li> 
         <li><a href="http://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html" target="_blank"><i class="icon-share icon"></i> CSS参考指南</a></li> 
         <li><a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html" target="_blank"><i class="icon-share icon"></i> FXML简介</a></li> 
        </ul> </li> 
       <li class="divider-vertical"></li> 
       <li class=""><a href="../../more.html"><i class="icon icon-plus-sign icon-white"></i> 更多精彩</a></li> 
       <li class=""><a href="../../license.html"><i class="icon icon-book icon-white"></i> 许可说明</a></li> 
       <li class=""><a href="../../about.html"><i class="icon icon-user icon-white"></i> 关于我们</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="row"> 
   <div id="container" class="container span9 offset1"> 
    <!-- Masthead
================================================== --> 
    <header class="jumbotron subhead" id="overview"> 
     <!-- Insert Header Here! --> 
     <h1>Using JavaFX UI Controls</h1>
     <p class=" lead">Customization of UI Controls</p>
     <ul class=" pager">
      <li class=" previous"><a href="menu_controls.htm">←上一篇</a></li>
     </ul>
     <hr />
    </header>
    <div id="ind"> 
     <!-- /////////////// Start content copied from DARB output ////////////// --> 
     <a id="CACCFEFD" name="CACCFEFD"></a>  
     <p>This chapter describes the aspects of UI control customization and summarizes some tips and tricks provided by Oracle to help you modify the appearance and behavior of UI controls.</p> 
     <p>You can learn how to customize the controls from the sample applications in the UIControlSamples project by applying Cascading Style Sheets (CSS), redefining the default behavior, and using cell factories. For more specific cases, when the task of your application requires unique features that cannot be implemented with the classes of the <code>javafx.scene.control</code> package, extend the <code>Control</code> class to invent your own control.</p> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref213" name="sthref213"></a> 
      <h2 class="sect1">Applying CSS</h2> 
      <p>You can change the look of UI controls by redefining the style definitions of the JavaFX <code>caspian</code> style sheets. <a href="../css_tutorial/jfxpub-css_tutorial.htm">Skinning JavaFX Applications with CSS</a> explains the general concepts and approaches to modifying the styles and enabling them in a JavaFX application.</p> 
      <p>Consider some of the specific tasks that are frequently requested by developers at the JavaFX forum.</p> 
      <p>Although the <code>Tooltip</code> class does not have any properties or methods to change the default color of the tooltip, you can modify the <code>-fx-background-color</code> property of the <code>.tooltip</code> CSS class as shown in <a href="#CACFGDAH">Example 24-1</a>.</p> 
      <div class="example">
       <a id="CACFGDAH" name="CACFGDAH"></a> 
       <p class="titleinexample">Example 24-1 Changing the Background Color of a Tooltip</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
.tooltip {    
    -fx-background-color: linear-gradient(#e2ecfe, #99bcfd);
}
.page-corner {
    -fx-background-color: linear-gradient(from 0% 0% to 50% 50%,#3278fa,#99bcfd);
}
</pre>
      </div> 
      <!-- class="example" --> 
      <p>The <code>.page-corner</code> CSS class defines the color of the right-bottom corner of the tooltip. When you add the code in <a href="#CACFGDAH">Example 24-1</a> to the style sheets of the TooltipSample and apply the style sheets to the scene, the tooltip changes its color to blue. See <a href="#CACDJEHJ">Figure 24-1</a> to evaluate the effect.</p> 
      <div class="figure">
       <a id="CACDJEHJ" name="CACDJEHJ"></a> 
       <p class="titleinfigure">Figure 24-1 Tooltip with the Blue Background Color</p> 
       <img src="img/custom-tooltip.png" alt="Description of Figure 24-1 follows" title="Description of Figure 24-1 follows" longdesc="img_text/custom-tooltip.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>Note that when you modify the default style of a tooltip, the new look is applied to all the tooltips in your application.</p> 
      <p>Another popular design task is changing the default marks for the controls. For example, the default style of the <code>CheckBox</code> class defines the traditional check mark for the selected state. You can redefine the shape of the mark as well as its color as shown in <a href="#CACCBGJI">Example 24-2</a>.</p> 
      <div class="example">
       <a id="CACCBGJI" name="CACCBGJI"></a> 
       <p class="titleinexample">Example 24-2 Alternative Mark for a Checkbox</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
.check-box .mark {
    -fx-shape:
&quot;M2,0L5,4L8,0L10,0L10,2L6,5L10,8L10,10L8,10L5,6L2,10L0,10L0,8L4,5L0,2L0,0Z&quot;;
}
.check-box:selected .mark {
    -fx-background-color: #0181e2;
}
</pre>
      </div> 
      <!-- class="example" --> 
      <p>The <code>-fx-shape</code> property sets the new SVG path for the mark, and the <code>-fx-background-color</code> property defines its color. When the modified style sheets are enabled in the CheckBoxSample application, the selected checkboxes contain X marks instead of check marks, as shown in <a href="#CACEGGAF">Figure 24-2</a>.</p> 
      <div class="figure">
       <a id="CACEGGAF" name="CACEGGAF"></a> 
       <p class="titleinfigure">Figure 24-2 ComboBoxSample with the Modified Checkbox Style</p> 
       <img src="img/custom-checkbox.png" alt="Description of Figure 24-2 follows" title="Description of Figure 24-2 follows" longdesc="img_text/custom-checkbox.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>Many developers asked how to overcome the limitation in visual style of the <code>TableView</code> and <code>ListView</code> controls. By default, all rows in these controls are shown, whether they are empty or not. With the proper CSS settings, you can set a specific color for all empty rows. <a href="#CACCBDID">Example 24-3</a> implements this task for a <code>TableView</code> control.</p> 
      <div class="example">
       <a id="CACCBDID" name="CACCBDID"></a> 
       <p class="titleinexample">Example 24-3 Setting Color for Empty Rows in a Table View</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
.table-row-cell:empty {
    -fx-background-color: lightyellow;
}
 
.table-row-cell:empty .table-cell {
    -fx-border-width: 0px;
}
</pre>
      </div> 
      <!-- class="example" --> 
      <p>The first CSS style determines that all empty rows, regardless of whether they are even or odd, should have light yellow backgrounds. When the table-row-cell is empty, the second CSS statement removes the vertical border that is painted on the right-hand side of all table cells.</p> 
      <p>When the CSS styles from <a href="#CACCBDID">Example 24-3</a> are enabled in the TableViewSample application, the Address Book table looks as shown <a href="#CACDBDGD">Figure 24-3</a>.</p> 
      <div class="figure">
       <a id="CACDBDGD" name="CACDBDGD"></a> 
       <p class="titleinfigure">Figure 24-3 TableViewSample with Color Added to the Empty Rows</p> 
       <img src="img/custom-table1.png" alt="Description of Figure 24-3 follows" title="Description of Figure 24-3 follows" longdesc="img_text/custom-table1.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>You can even set the <code>null</code> value for the background color of the empty cells. The style sheets will use the default background color of the table view in this case. See <a href="#CACCGIIC">Figure 24-4</a> to evaluate the effect.</p> 
      <div class="figure">
       <a id="CACCGIIC" name="CACCGIIC"></a> 
       <p class="titleinfigure">Figure 24-4 TableViewSample with Null Background Color Added to the Empty Rows</p> 
       <img src="img/custom-table2.png" alt="Description of Figure 24-4 follows" title="Description of Figure 24-4 follows" longdesc="img_text/custom-table2.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>You can set more CSS properties for UI Controls to alter their shapes, color schemes, and the applied effects. See the <a href="../api/javafx/scene/doc-files/cssref.html">JavaFX CSS Reference Guide</a> for more information about available CSS properties and classes.</p> 
     </div> 
     <!-- class="sect1" --> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref218" name="sthref218"></a> 
      <h2 class="sect1">Altering Default Behavior</h2> 
      <p>Many developers requested a specific API to restrict input in the text field, for example, to allow only number values. <a href="#CACFDGGF">Example 24-4</a> provides a simple application with a numeric text field.</p> 
      <div class="example">
       <a id="CACFDGGF" name="CACFDGGF"></a> 
       <p class="titleinexample">Example 24-4 Prohibiting Letters in the Text Field</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class CustomTextFieldSample extends Application {
    
    final static Label label = new Label();
 
    @Override
    public void start(Stage stage) {
        Group root = new Group();
        Scene scene = new Scene(root, 300, 150);
        stage.setScene(scene);
        stage.setTitle(&quot;Text Field Sample&quot;);
 
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(5);
        grid.setHgap(5);
 
        scene.setRoot(grid);
        final Label dollar = new Label(&quot;$&quot;);
        GridPane.setConstraints(dollar, 0, 0);
        grid.getChildren().add(dollar);
        
        <span class="bold">final TextField sum = new TextField() {</span>
            <span class="bold">@Override</span>
            <span class="bold">public void replaceText(int start, int end, String text) {</span>
                <span class="bold">if (!text.matches(&quot;[a-z, A-Z]&quot;)) {</span>
                    <span class="bold">super.replaceText(start, end, text);</span>                     
                <span class="bold">}</span>
                <span class="bold">label.setText(&quot;Enter a numeric value&quot;);</span>
            <span class="bold">}</span>
 
            <span class="bold">@Overrid</span><span class="bold">e</span>
            <span class="bold">public void replaceSelection(String text) </span><span class="bold">{</span>
                <span class="bold">if (!text.matches(&quot;[a-z, A-Z]&quot;)) {</span>
                    <span class="bold">super.replaceSelection(text);</span>
                <span class="bold">}</span>
            <span class="bold">}</span>
        <span class="bold">};</span>
 
        sum.setPromptText(&quot;Enter the total&quot;);
        sum.setPrefColumnCount(10);
        GridPane.setConstraints(sum, 1, 0);
        grid.getChildren().add(sum);
        
        Button submit = new Button(&quot;Submit&quot;);
        GridPane.setConstraints(submit, 2, 0);
        grid.getChildren().add(submit);
        
        submit.setOnAction(new EventHandler&lt;ActionEvent&gt;() {
            @Override
            public void handle(ActionEvent e) {
                label.setText(null);
            }
        });
        
        GridPane.setConstraints(label, 0, 1);
        GridPane.setColumnSpan(label, 3);
        grid.getChildren().add(label);
        
        scene.setRoot(grid);
        stage.show();
    }
 
    public static void main(String[] args) {
        launch(args);
    }
}
</pre>
      </div> 
      <!-- class="example" --> 
      <p>To redefine the default implementation of the <code>TextField</code> class, you must override the <code>replaceText</code> and <code>replaceSelection</code> methods inherited from the <code>TextInputControl</code> class.</p> 
      <p>When the user tries to enter any letter in the Sum text field, no symbols appear, and the warning message is shown. <a href="#CACEJDHA">Figure 24-5</a> illustrates this situation.</p> 
      <div class="figure">
       <a id="CACEJDHA" name="CACEJDHA"></a> 
       <p class="titleinfigure">Figure 24-5 Attempt to Enter Letter Symbols</p> 
       <img src="img/custom-textfield1.png" alt="Description of Figure 24-5 follows" title="Description of Figure 24-5 follows" longdesc="img_text/custom-textfield1.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>However, when the user attempts to enter the numeric values, they appear in the field as shown in <a href="#CACJFBJJ">Figure 24-6</a>.</p> 
      <div class="figure">
       <a id="CACJFBJJ" name="CACJFBJJ"></a> 
       <p class="titleinfigure">Figure 24-6 Entering Numeric Values</p> 
       <img src="img/custom-textfield2.png" alt="Description of Figure 24-6 follows" title="Description of Figure 24-6 follows" longdesc="img_text/custom-textfield2.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" -->
     </div> 
     <!-- class="sect1" --> 
     <div class="sect1">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref221" name="sthref221"></a> 
      <h2 class="sect1">Implementing Cell Factories</h2> 
      <p>Appearance and even behavior of four UI controls can be entirely customized by using the mechanism of cell factories. You can apply cell factories to <code>TableView</code>, <code>ListView</code>, <code>TreeView</code>, and <code>ComboBox</code>. A cell factory is used to generate cell instances, which are used to represent any single item of these controls.</p> 
      <p>The <code>Cell</code> class extends the <code>Labeled</code> class, which provides all the required properties and methods to implement the most typical use case — showing and editing text.? However, when the task of your application requires showing graphical objects in the lists or tables, you can use the <code>graphic</code> property and place any <code>Node</code> in the cell (see the Cell class <a href="../api/javafx/scene/control/Cell.html">API specification</a> for more information about custom cells).</p> 
      <p>For instance, the code fragments in <a href="#CACCFCGA">Example 24-5</a> create a cell factory for the list view and redefine the content of the cells within the <code>updateItem</code> method, so that the list shows rectangles of different colors.</p> 
      <div class="example">
       <a id="CACCFCGA" name="CACCFCGA"></a> 
       <p class="titleinexample">Example 24-5 Implementing Cell Factories for the ListView Control</p> 
       <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
list.setCellFactory(new Callback&lt;ListView&lt;String&gt;, ListCell&lt;String&gt;&gt;() {
    Override public ListCell&lt;String&gt; call(ListView&lt;String&gt; list) {
        return new ColorRectCell();
    }
});
...
static class ColorRectCell extends ListCell&lt;String&gt; {
    @Override 
    public void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);
        Rectangle rect = new Rectangle(100, 20);
        if (item != null) {
            rect.setFill(Color.web(item));
            setGraphic(rect);
        } else {
            setGraphic(null);
        }
    }
}
</pre>
      </div> 
      <!-- class="example" --> 
      <p><a href="#CACEGJBI">Figure 24-7</a> shows how this customized list looks in the ListViewSample of the UIControlSamples project.</p> 
      <div class="figure">
       <a id="CACEGJBI" name="CACEGJBI"></a> 
       <p class="titleinfigure">Figure 24-7 List View with Color Rectangles</p> 
       <img src="img/list-colors.png" alt="Description of Figure 24-7 follows" title="Description of Figure 24-7 follows" longdesc="img_text/list-colors.htm" />
       <br /> 
       <br /> 
       <br />
      </div> 
      <!-- class="figure" --> 
      <p>This tutorial uses the cell factory mechanism extensively to customize UI controls. <a href="#CACCBFAG">Table 24-1</a> summarizes the coding templates that you can use to implement cell factories on your applications.</p> 
      <div class="tblformal">
       <a id="sthref223" name="sthref223"></a>
       <a id="CACCBFAG" name="CACCBFAG"></a> 
       <p class="titleintable">Table 24-1 Cell Factory Coding Patterns</p> 
       <table class="Formal table table-bordered table-striped" title="Cell Factory Coding Patterns" summary="This table provides coding patterns for creating cell factories for ListView, ComboBox, TableView, and TreeView" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
        <colgroup>
         <col width="16%" /> 
         <col width="*" /> 
        </colgroup>
        <thead> 
         <tr align="left" valign="top"> 
          <th align="left" valign="bottom" id="r1c1-t2">Control</th> 
          <th align="left" valign="bottom" id="r1c2-t2">Coding Pattern</th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr align="left" valign="top"> 
          <td align="left" id="r2c1-t2" headers="r1c1-t2"> <p><code>ListView</code>, <code>ComboBox</code></p> </td> 
          <td align="left" headers="r2c1-t2 r1c2-t2"> <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
list.setCellFactory(new Callback&lt;ListView&lt;String&gt;,
ListCell&lt;String&gt;&gt;() {    
            @Override 
            public ListCell&lt;String&gt; call(ListView&lt;String&gt; list) {
               //cell implementation            
            }
});
</pre></td> 
         </tr> 
         <tr align="left" valign="top"> 
          <td align="left" id="r3c1-t2" headers="r1c1-t2"> <p><code>TableView</code></p> </td> 
          <td align="left" headers="r3c1-t2 r1c2-t2"> <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
column.setCellFactory(new Callback&lt;TableColumn,
    TableCell&gt;() {
        public TableCell call(TableColumn p) {
                    //cell implementation                
                }        
});
</pre></td> 
         </tr> 
         <tr align="left" valign="top"> 
          <td align="left" id="r4c1-t2" headers="r1c1-t2"> <p><code>TreeView</code></p> </td> 
          <td align="left" headers="r4c1-t2 r1c2-t2"> <pre xml:space="preserve" class="oac_no_warn prettyprint linenums">
tree.setCellFactory(new Callback&lt;TreeView&lt;String&gt;, 
    TreeCell&lt;String&gt;&gt;(){
            @Override
            public TreeCell&lt;String&gt; call(TreeView&lt;String&gt; p) {
                //cell implementation
            }
});
</pre></td> 
         </tr> 
        </tbody> 
       </table> 
       <br />
      </div> 
      <!-- class="tblformal" --> 
      <p>To evaluate more cell factory use cases, see also the <a href="table-view.htm#CJAGAAEE">Table View</a>, <a href="tree-view.htm#BABDEADA">Tree View</a>, and <a href="combo-box.htm#BABJCCIB">Combo Box</a> chapters.</p> 
      <p class="itemizedlisttitle">Related Documentation and Resources&nbsp;</p> 
      <ul> 
       <li> <p><a href="../css_tutorial/jfxpub-css_tutorial.htm">Skin Applications with CSS</a></p> </li> 
       <li> <p><a href="../api/javafx/scene/doc-files/cssref.html">JavaFX CSS Reference Guide</a></p> </li> 
       <li> <p><a href="../../../../fxexperience.com/default.htm">JavaFX News, Demos, and Insight</a></p> </li> 
      </ul> 
     </div> 
     <!-- class="sect1" --> 
     <!-- /////////////// End content copied from DARB output ////////////// --> 
    </div> 
    <!-- Insert Sections Here! --> 
    <!-- Footer
      ================================================== --> 
    <footer class="footer"> 
     <!-- UY BEGIN --> 
     <div id="uyan_frame"></div> 
     <script type="text/javascript" id="UYScript" src="http://v1.uyan.cc/js/iframe.js?UYUserId=1529249" async=""></script> 
     <!-- UY END --> 
    </footer> 
   </div>
   <div class=" span3" style="padding-top: 110px;">
    <div class=" well">
     <ul class=" nav nav-list">
      <li class=" nav-header">本章目录</li>
      <li><a href="jfxpub-ui_controls.htm">About This Tutorial</a></li>
      <li><a href="overview.htm">JavaFX UI Controls</a></li>
      <li><a href="label.htm">Label</a></li>
      <li><a href="button.htm">Button</a></li>
      <li><a href="radio-button.htm">Radio Button</a></li>
      <li><a href="toggle-button.htm">Toggle Button</a></li>
      <li><a href="checkbox.htm">Checkbox</a></li>
      <li><a href="choice-box.htm">Choice Box</a></li>
      <li><a href="text-field.htm">Text Field</a></li>
      <li><a href="password-field.htm">Password Field</a></li>
      <li><a href="scrollbar.htm">Scroll Bar</a></li>
      <li><a href="scrollpane.htm">Scroll Pane</a></li>
      <li><a href="list-view.htm">List View</a></li>
      <li><a href="table-view.htm">Table View</a></li>
      <li><a href="tree-view.htm">Tree View</a></li>
      <li><a href="combo-box.htm">Combo Box</a></li>
      <li><a href="separator.htm">Separator</a></li>
      <li><a href="slider.htm">Slider</a></li>
      <li><a href="progress.htm">Progress Bar and Progress Indicator</a></li>
      <li><a href="hyperlink.htm">Hyperlink</a></li>
      <li><a href="tooltip.htm">Tooltip</a></li>
      <li><a href="editor.htm">HTML Editor</a></li>
      <li><a href="accordion-titledpane.htm">Titled Pane and Accordion</a></li>
      <li><a href="menu_controls.htm">Menu</a></li>
      <li class=" active"><a href="custom.htm">Customization of UI Controls</a></li>
      <li class=" divider"></li>
      <li class=" nav-header">源码下载</li>
      <li><a href="http://download.oracle.com/javafx/2/ui_controls/UIControlSamples.zip">UIControlSamples.zip</a></li>
      <li class=" divider"></li>
      <li class=" nav-header">版本信息</li>
      <li>平台版本：JavaFX 2.1</li>
      <li>翻译编辑：(未翻译)</li>
      <li>最后更新：2012年7月28日</li>
     </ul>
    </div>
   </div>
   <!-- /container --> 
  </div> 
  <!-- JiaThis Button BEGIN --> 
  <script type="text/javascript">var jiathis_config = {data_track_clickback:true};</script> 
  <script type="text/javascript" src="http://v3.jiathis.com/code/jiathis_r.js?type=left&amp;move=0&amp;btn=l2.gif&amp;uid=1529249" charset="utf-8"></script> 
  <!-- JiaThis Button END --> 
  <!-- Le javascript
    ================================================== --> 
  <!-- Placed at the end of the document so the pages load faster --> 
  <script src="../../assets/js/jquery.min.js"></script> 
  <script src="../../assets/js/easing.js" type="text/javascript"></script> 
  <script src="../../assets/js/jquery.ui.totop.min.js" type="text/javascript"></script> 
  <script src="../../assets/js/google-code-prettify/prettify.js"></script> 
  <script type="text/javascript">
		$(document).ready(function() {
			/*
			var defaults = {
	  			containerID: 'toTop', // fading element id
				containerHoverID: 'toTopHover', // fading element hover id
				scrollSpeed: 1200,
				easingType: 'linear' 
	 		};
			*/
			$().UItoTop({ easingType: 'easeOutQuart' });
		});
	</script> 
  <script src="../../assets/js/bootstrap.min.js"></script> 
  <script src="../../assets/js/application.js"></script>   
 </body>
</html>